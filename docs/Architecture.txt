Архитектура видеосервера NVR.

1. Общая организация.

  Видеосервер:
    * принимает видеопотоки с IP-камер;
    * записывает видеопотоки в видеоархив, управляет удалением старых записей;
    * позволяет управлять списком камер, параметрами получения и записи видео
      без перезапуска сервера;
    * позволяет управлять записью (останавливать и возобновлять) через внешний API;
    * ведёт журнал событий (моменты начала/останова записи и другие события)
      и предоставляет интерфейс для доступа к нему;
    * предоставляет HTTP-интерфейс для получения видеофайлов, содержащих видеозапись
      за произвольный промежуток времени;
    * позволяет просматривать видеопотоки в реальном времени по протоколам
      RTMP(T), HLS, RTSP;
    * позволяет просматривать содержимое видеоархива с произвольного места
      в режиме непрерывного воспроизведения, с возможностью ускоренного воспроизведения;
    * поддерживает внешние механизмы авторизации для ограничения доступа
      на просмотр видео;
    * предоставляет статистику по своей работе: трафик по камерам и суммарный,
      данные по нагрузке и т п.

2. Получение видеопотоков с IP-камер.

   Видеосервер получает вдиеопоток с камер по протоколу RTSP (также есть поддержка MJPEG
   через HTTP). Крайне желательно, чтобы видеокамера выдавала аудиопоток AAC, т к в этом
   случае не придётся перекодировать аудиопоток для показа мобильным клиентам и не будет
   лишних проблем с воспроизведением видеофайлов, извлечённых из архива.

   Прим.: Аудиопоток G.711, отдаваемый тестовыми камерами, пока не удалось правильно
   воспроизвести во флеше (не та частота дискретизации).

3. Управление списком камер.

   Список камер, с которых сервер должен получать видеоданные, задаётся одним
   XML-файлом "sources.xml". В этом файле для каждой камеры содержится полная
   информация о способе получения видео и режиме записи (включая расписание),
   а также все настройки, связанные с получением и записью видео.

   Для подключения/отключения камеры или изменения параметров работы с видеопотоками
   нужно обновить файл sources.xml и заставить видеосервер перечитать его
   специальным HTTP-запросом. При этом будут применены все изменения в списке
   камер по сравнению с предыдущей настройкой.

   Примерный вид sources.xml:

     <sources>
       <camera id="cam1">
         <uri>rtsp://user:password@1.2.3.4:5678/video.sdp</uri>
         <record mode="always"/>
       </camera>
       <camera id="cam2" audio="off">
         <uri>rtsp://foobar.com/camera/stream.avc</uri>
         <record mode="managed"/>
       </camera>
     </sources>


3. Управление записью видео.

   Запись видео осуществляется в следующих вариантах (можно комбинировать):
     * непрерывно;
     * по календарному расписанию, возможно периодическое задание;
     * начало/останов записи по командам извне (от детектора движения).

   Непрерывная запись и расписание задаются в файле sources.xml.
   Управление записью по внешним командам осуществляется специальными
   HTTP-запросами к серверу.

3. Доступ к видеоархиву.

   Возможны два основных режима доступа к видеоархиву:
     * показ записанного видео (режим просмотра);
     * получение файла с записанным видео за заданный временной интервал.

   Файл с видеозаписью за заданный интервал формируется "на лету" и отдаётся
   клиенту в наиболее подходящем контейнерном формате (mp4, mkv).

   Просмотр записанного видео осуществляется:
     * На PC - через флеш-плагин браузера, видео отдаётся по протоколу RTMP(T);
     * На устройствах Apple - по протоколу HLS либо mp4-файлами;
     * На Android - mp4-файлами либо по RTSP.

   Просмотр записанного видео через mp4-файлы аналогичен получению видеозаписи
   за заданный интервал. При достижении конца файла нужно запросить
   на воспроизведение новый файл. Это запасной вариант для случаев, когда
   другие способы показа не работают.

   Параметры воспроизведения оговариваются для каждого способа показа видео
   отдельно.

4. Доступ к журналу событий.

   По информации из журнала событий можно строить наглядные полосы навигации
   с указанием отмеченной активности цветом и отдельными маркерами.

   Сервер предоставляет "выписку" из журнала для конкретной камеры по HTTP-запросу,
   ответ в формате JSON. По этой выписке на стороне клиента строится наглядное
   изображение для навигации.

4. Внутренняя организация видеоархива.

   Видеоданные в архиве хранятся во внутреннем формате, оптимизированном для непрерывной
   записи. Записанное видео разбивается на файлы среднего размера (например, по N=30 минут)
   и раскладывается по директориям, названия которых отражают календарное время
   начала записи. Удаление устаревших записей (очистка архива с конца) производится
   удалением старых файлов записей, т е блоками по N минут.

   Быстрая навигация по файлам записи производится через дополнительный индексный файл.
   На каждый файл видеоданных заводится свой индексный файл.

   Журнал событий ведётся во внутреннем формате независимо от разбиения видео на файлы.
   Файлы, составляющие журнал событий, раскладываются по тем же директориям,
   что и видеоданные, в соответствии с календарным временем.
   
   Для удобного доступа к видеоданным в режиме оффлайн (вынули жёсткие диски,
   вставили в другую машину и смотрим на файлы) видеоданные желательно обрамлять в
   стандартный контейнерный формат. На начальном этапе возможно использование flv
   как простейшего контейнерного формата. Далее желательно заворачивать в mp4 или
   другой подходящий контейнер.
   
   Если работа видеосервера была прервана аварийно и для последнего файла
   записи не было завершено формирование заголовка стандартного контейнерного формата,
   то видеосервер дописывает заголовок для последнего файла при следующем запуске.

   Запись видеопотоков с меньшим разрешением для превью функционально эквивалентна
   ведению второго параллельного видеоархива (вероятно, с более редкими интервалами записи).

5. Внешняя авторизация.

   При подключении клиента видеосервер проверяет право доступа на просмотр видео
   HTTP-запросом к внешнему механизму авторизации.

6. Шифрование и защита.

   По шифрованию и защите нужно конкретизировать требования: что именно шифровать
   и когда, чтобы определить возможные технологические решения.

